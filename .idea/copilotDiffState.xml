<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/appsbase/jetcode/navigation/JetCodeDestinations.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/appsbase/jetcode/navigation/JetCodeDestinations.kt" />
              <option name="originalContent" value="package com.appsbase.jetcode.navigation&#10;&#10;/**&#10; * Navigation routes for the JetCode app&#10; */&#10;object JetCodeDestinations {&#10;    const val ONBOARDING_ROUTE = &quot;onboarding&quot;&#10;    const val SKILL_LIST_ROUTE = &quot;skill_list&quot;&#10;    const val SKILL_DETAIL_ROUTE = &quot;skill_detail&quot;&#10;    const val TOPIC_DETAIL_ROUTE = &quot;topic_detail&quot;&#10;    const val PRACTICE_LIST_ROUTE = &quot;practice_list&quot;&#10;    const val PRACTICE_ROUTE = &quot;practice&quot;&#10;    const val PROFILE_ROUTE = &quot;profile&quot;&#10;}" />
              <option name="updatedContent" value="package com.appsbase.jetcode.navigation&#10;&#10;/**&#10; * Navigation routes for the JetCode app&#10; */&#10;object JetCodeDestinations {&#10;    const val ONBOARDING_ROUTE = &quot;onboarding&quot;&#10;    const val SKILL_LIST_ROUTE = &quot;skill_list&quot;&#10;    const val SKILL_DETAIL_ROUTE = &quot;skill_detail&quot;&#10;    const val TOPIC_DETAIL_ROUTE = &quot;topic_detail&quot;&#10;    const val PRACTICE_LIST_ROUTE = &quot;practice_list&quot;&#10;    const val PRACTICE_ROUTE = &quot;practice&quot;&#10;    const val PROFILE_ROUTE = &quot;profile&quot;&#10;    const val DASHBOARD_ROUTE = &quot;dashboard&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/appsbase/jetcode/navigation/JetCodeNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/appsbase/jetcode/navigation/JetCodeNavigation.kt" />
              <option name="originalContent" value="package com.appsbase.jetcode.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.appsbase.jetcode.feature.learning.presentation.skill_detail.SkillDetailScreen&#10;import com.appsbase.jetcode.feature.learning.presentation.skill_list.SkillListScreen&#10;import com.appsbase.jetcode.feature.learning.presentation.topic_detail.TopicDetailScreen&#10;import com.appsbase.jetcode.feature.onboarding.presentation.OnboardingScreen&#10;import com.appsbase.jetcode.feature.practice.presentation.practice_list.PracticeListScreen&#10;import com.appsbase.jetcode.feature.practice.presentation.practice_quiz.PracticeQuizScreen&#10;import com.appsbase.jetcode.feature.profile.presentation.ProfileScreen&#10;&#10;/**&#10; * Main navigation host for the JetCode app&#10; */&#10;@Composable&#10;fun JetCodeNavHost(&#10;    navController: NavHostController = rememberNavController(),&#10;    startDestination: String = JetCodeDestinations.ONBOARDING_ROUTE,&#10;    onOnboardingComplete: () -&gt; Unit = {},&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination,&#10;    ) {&#10;        // Onboarding flow&#10;        composable(JetCodeDestinations.ONBOARDING_ROUTE) {&#10;            OnboardingScreen(&#10;                onOnboardingComplete = {&#10;                    onOnboardingComplete()&#10;                    navController.navigate(JetCodeDestinations.SKILL_LIST_ROUTE) {&#10;                        popUpTo(JetCodeDestinations.ONBOARDING_ROUTE) { inclusive = true }&#10;                    }&#10;                },&#10;            )&#10;        }&#10;&#10;        // Learning dashboard&#10;        composable(JetCodeDestinations.SKILL_LIST_ROUTE) {&#10;            SkillListScreen(&#10;                onSkillClick = { skillId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.SKILL_DETAIL_ROUTE}/$skillId&quot;)&#10;                },&#10;                onProfileClick = {&#10;                    navController.navigate(JetCodeDestinations.PROFILE_ROUTE)&#10;                },&#10;            )&#10;        }&#10;&#10;        // Skill detail&#10;        composable(&quot;${JetCodeDestinations.SKILL_DETAIL_ROUTE}/{${NavigationArgs.SKILL_ID}}&quot;) { backStackEntry -&gt;&#10;            val skillId = backStackEntry.arguments?.getString(NavigationArgs.SKILL_ID) ?: &quot;&quot;&#10;            SkillDetailScreen(&#10;                skillId = skillId,&#10;                onLessonClick = { topicId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.TOPIC_DETAIL_ROUTE}/$topicId&quot;)&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Topic detail (replaces lesson detail)&#10;        composable(&quot;${JetCodeDestinations.TOPIC_DETAIL_ROUTE}/{${NavigationArgs.TOPIC_ID}}&quot;) { backStackEntry -&gt;&#10;            val topicId = backStackEntry.arguments?.getString(NavigationArgs.TOPIC_ID) ?: &quot;&quot;&#10;            TopicDetailScreen(&#10;                topicId = topicId,&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onFinishClick = {&#10;                    navController.popBackStack()&#10;                },&#10;                onPracticeClick = { practiceSetId -&gt;&#10;                    navController.navigate(JetCodeDestinations.PRACTICE_LIST_ROUTE)&#10;                },&#10;            )&#10;        }&#10;&#10;        // Practice List screen&#10;        composable(JetCodeDestinations.PRACTICE_LIST_ROUTE) {&#10;            PracticeListScreen(&#10;                onPracticeClick = { practiceSetId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.PRACTICE_ROUTE}/$practiceSetId&quot;)&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Practice screen&#10;        composable(&quot;${JetCodeDestinations.PRACTICE_ROUTE}/{${NavigationArgs.PRACTICE_SET_ID}}&quot;) { backStackEntry -&gt;&#10;            val practiceSetId =&#10;                backStackEntry.arguments?.getString(NavigationArgs.PRACTICE_SET_ID) ?: &quot;&quot;&#10;            PracticeQuizScreen(&#10;                practiceId = practiceSetId,&#10;                onPracticeComplete = {&#10;                    navController.popBackStack()&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Profile&#10;        composable(JetCodeDestinations.PROFILE_ROUTE) {&#10;            ProfileScreen(&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.appsbase.jetcode.navigation&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.appsbase.jetcode.feature.dashboard.presentation.DashboardScreen&#10;import com.appsbase.jetcode.feature.learning.presentation.skill_detail.SkillDetailScreen&#10;import com.appsbase.jetcode.feature.learning.presentation.skill_list.SkillListScreen&#10;import com.appsbase.jetcode.feature.learning.presentation.topic_detail.TopicDetailScreen&#10;import com.appsbase.jetcode.feature.onboarding.presentation.OnboardingScreen&#10;import com.appsbase.jetcode.feature.practice.presentation.practice_list.PracticeListScreen&#10;import com.appsbase.jetcode.feature.practice.presentation.practice_quiz.PracticeQuizScreen&#10;import com.appsbase.jetcode.feature.profile.presentation.ProfileScreen&#10;&#10;/**&#10; * Main navigation host for the JetCode app&#10; */&#10;@Composable&#10;fun JetCodeNavHost(&#10;    navController: NavHostController = rememberNavController(),&#10;    startDestination: String = JetCodeDestinations.ONBOARDING_ROUTE,&#10;    onOnboardingComplete: () -&gt; Unit = {},&#10;) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = startDestination,&#10;    ) {&#10;        // Onboarding flow&#10;        composable(JetCodeDestinations.ONBOARDING_ROUTE) {&#10;            OnboardingScreen(&#10;                onOnboardingComplete = {&#10;                    onOnboardingComplete()&#10;                    navController.navigate(JetCodeDestinations.DASHBOARD_ROUTE) {&#10;                        popUpTo(JetCodeDestinations.ONBOARDING_ROUTE) { inclusive = true }&#10;                    }&#10;                },&#10;            )&#10;        }&#10;&#10;        // Dashboard&#10;        composable(JetCodeDestinations.DASHBOARD_ROUTE) {&#10;            DashboardScreen(&#10;                onEnterLearning = {&#10;                    navController.navigate(JetCodeDestinations.SKILL_LIST_ROUTE)&#10;                },&#10;                onEnterPractice = {&#10;                    navController.navigate(JetCodeDestinations.PRACTICE_LIST_ROUTE)&#10;                },&#10;                onProfileClick = {&#10;                    navController.navigate(JetCodeDestinations.PROFILE_ROUTE)&#10;                }&#10;            )&#10;        }&#10;&#10;        // Learning dashboard&#10;        composable(JetCodeDestinations.SKILL_LIST_ROUTE) {&#10;            SkillListScreen(&#10;                onSkillClick = { skillId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.SKILL_DETAIL_ROUTE}/$skillId&quot;)&#10;                },&#10;                onProfileClick = {&#10;                    navController.navigate(JetCodeDestinations.PROFILE_ROUTE)&#10;                },&#10;            )&#10;        }&#10;&#10;        // Skill detail&#10;        composable(&quot;${JetCodeDestinations.SKILL_DETAIL_ROUTE}/{${NavigationArgs.SKILL_ID}}&quot;) { backStackEntry -&gt;&#10;            val skillId = backStackEntry.arguments?.getString(NavigationArgs.SKILL_ID) ?: &quot;&quot;&#10;            SkillDetailScreen(&#10;                skillId = skillId,&#10;                onLessonClick = { topicId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.TOPIC_DETAIL_ROUTE}/$topicId&quot;)&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Topic detail (replaces lesson detail)&#10;        composable(&quot;${JetCodeDestinations.TOPIC_DETAIL_ROUTE}/{${NavigationArgs.TOPIC_ID}}&quot;) { backStackEntry -&gt;&#10;            val topicId = backStackEntry.arguments?.getString(NavigationArgs.TOPIC_ID) ?: &quot;&quot;&#10;            TopicDetailScreen(&#10;                topicId = topicId,&#10;                onNavigateBack = {&#10;                    navController.popBackStack()&#10;                },&#10;                onFinishClick = {&#10;                    navController.popBackStack()&#10;                },&#10;                onPracticeClick = { practiceSetId -&gt;&#10;                    navController.navigate(JetCodeDestinations.PRACTICE_LIST_ROUTE)&#10;                },&#10;            )&#10;        }&#10;&#10;        // Practice List screen&#10;        composable(JetCodeDestinations.PRACTICE_LIST_ROUTE) {&#10;            PracticeListScreen(&#10;                onPracticeClick = { practiceSetId -&gt;&#10;                    navController.navigate(&quot;${JetCodeDestinations.PRACTICE_ROUTE}/$practiceSetId&quot;)&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Practice screen&#10;        composable(&quot;${JetCodeDestinations.PRACTICE_ROUTE}/{${NavigationArgs.PRACTICE_SET_ID}}&quot;) { backStackEntry -&gt;&#10;            val practiceSetId =&#10;                backStackEntry.arguments?.getString(NavigationArgs.PRACTICE_SET_ID) ?: &quot;&quot;&#10;            PracticeQuizScreen(&#10;                practiceId = practiceSetId,&#10;                onPracticeComplete = {&#10;                    navController.popBackStack()&#10;                },&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;&#10;        // Profile&#10;        composable(JetCodeDestinations.PROFILE_ROUTE) {&#10;            ProfileScreen(&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                },&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/features/dashboard/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/features/dashboard/build.gradle.kts" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.appsbase.jetcode.feature.dashboard&quot;&#10;    compileSdk = libs.versions.compileSdk.get().toInt()&#10;&#10;    defaultConfig {&#10;        minSdk = libs.versions.minSdk.get().toInt()&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(project(&quot;:core:common&quot;))&#10;    implementation(project(&quot;:core:ui&quot;))&#10;    implementation(project(&quot;:core:designsystem&quot;))&#10;    implementation(project(&quot;:features:learning&quot;))&#10;    implementation(project(&quot;:features:practice&quot;))&#10;    implementation(project(&quot;:features:profile&quot;))&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.bundles.compose)&#10;    implementation(libs.bundles.lifecycle)&#10;    implementation(libs.bundles.kotlinx)&#10;    implementation(libs.bundles.koin)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.timber)&#10;    debugImplementation(libs.bundles.compose.debug)&#10;    testImplementation(libs.bundles.testing)&#10;    androidTestImplementation(libs.bundles.android.testing)&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardContract.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardContract.kt" />
              <option name="updatedContent" value="package com.appsbase.jetcode.feature.dashboard.presentation&#10;&#10;import com.appsbase.jetcode.core.common.mvi.UiEffect&#10;import com.appsbase.jetcode.core.common.mvi.UiIntent&#10;import com.appsbase.jetcode.core.common.mvi.UiState&#10;&#10;/**&#10; * MVI contracts for Dashboard&#10; */&#10;data class DashboardState(&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;) : UiState&#10;&#10;sealed class DashboardIntent : UiIntent {&#10;    data object EnterLearning : DashboardIntent()&#10;    data object EnterPractice : DashboardIntent()&#10;    data object ProfileClicked : DashboardIntent()&#10;}&#10;&#10;sealed class DashboardEffect : UiEffect {&#10;    data object NavigateToLearning : DashboardEffect()&#10;    data object NavigateToPractice : DashboardEffect()&#10;    data object NavigateToProfile : DashboardEffect()&#10;    data class ShowError(val message: String) : DashboardEffect()&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardScreen.kt" />
              <option name="updatedContent" value="package com.appsbase.jetcode.feature.dashboard.presentation&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.MenuBook&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.PlayCircleFilled&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import org.koin.androidx.compose.koinViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun DashboardScreen(&#10;    onEnterLearning: () -&gt; Unit,&#10;    onEnterPractice: () -&gt; Unit,&#10;    onProfileClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    viewModel: DashboardViewModel = koinViewModel()&#10;) {&#10;    val state by viewModel.uiState.collectAsStateWithLifecycle()&#10;&#10;    LaunchedEffect(viewModel) {&#10;        viewModel.effect.collect { effect -&gt;&#10;            when (effect) {&#10;                is DashboardEffect.NavigateToLearning -&gt; onEnterLearning()&#10;                is DashboardEffect.NavigateToPractice -&gt; onEnterPractice()&#10;                is DashboardEffect.NavigateToProfile -&gt; onProfileClick()&#10;                is DashboardEffect.ShowError -&gt; { /* Show snackbar or error */ }&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&quot;JetCode Dashboard&quot;, fontWeight = FontWeight.Bold)&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.handleIntent(DashboardIntent.ProfileClicked) }) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Person,&#10;                            contentDescription = &quot;Profile&quot;&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        modifier = modifier&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;                .padding(24.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Welcome to JetCode!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Text(&#10;                text = &quot;Choose your path to start learning or practicing.&quot;,&#10;                style = MaterialTheme.typography.bodyLarge,&#10;                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)&#10;            )&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(32.dp)&#10;            ) {&#10;                DashboardCard(&#10;                    title = &quot;Learning&quot;,&#10;                    description = &quot;Explore skills and lessons&quot;,&#10;                    icon = Icons.Default.MenuBook,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    onClick = { viewModel.handleIntent(DashboardIntent.EnterLearning) }&#10;                )&#10;                DashboardCard(&#10;                    title = &quot;Practice&quot;,&#10;                    description = &quot;Sharpen your skills&quot;,&#10;                    icon = Icons.Default.PlayCircleFilled,&#10;                    color = MaterialTheme.colorScheme.secondary,&#10;                    onClick = { viewModel.handleIntent(DashboardIntent.EnterPractice) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun DashboardCard(&#10;    title: String,&#10;    description: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    color: Color,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .width(160.dp)&#10;            .height(200.dp)&#10;            .clickable { onClick() },&#10;        shape = RoundedCornerShape(20.dp),&#10;        colors = CardDefaults.cardColors(containerColor = color.copy(alpha = 0.12f)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(20.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .size(64.dp)&#10;                    .clip(CircleShape)&#10;                    .background(color.copy(alpha = 0.2f)),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    tint = color,&#10;                    modifier = Modifier.size(36.dp)&#10;                )&#10;            }&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.titleLarge,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;            Text(&#10;                text = description,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = color,&#10;                modifier = Modifier.padding(top = 4.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/features/dashboard/src/main/kotlin/com/appsbase/jetcode/feature/dashboard/presentation/DashboardViewModel.kt" />
              <option name="updatedContent" value="package com.appsbase.jetcode.feature.dashboard.presentation&#10;&#10;import androidx.lifecycle.viewModelScope&#10;import com.appsbase.jetcode.core.common.mvi.BaseViewModel&#10;import kotlinx.coroutines.launch&#10;import timber.log.Timber&#10;&#10;class DashboardViewModel : BaseViewModel&lt;DashboardState, DashboardIntent, DashboardEffect&gt;(&#10;    initialState = DashboardState()&#10;) {&#10;    override fun handleIntent(intent: DashboardIntent) {&#10;        when (intent) {&#10;            is DashboardIntent.EnterLearning -&gt; sendEffect(DashboardEffect.NavigateToLearning)&#10;            is DashboardIntent.EnterPractice -&gt; sendEffect(DashboardEffect.NavigateToPractice)&#10;            is DashboardIntent.ProfileClicked -&gt; sendEffect(DashboardEffect.NavigateToProfile)&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>